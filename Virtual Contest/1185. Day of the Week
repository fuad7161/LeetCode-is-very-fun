 int get_month_code(int n){
	std::map<int, int> m;
	string s = "033614625035";
	for(int i=0;i<12;i++){
		m[i] = s[i]-'0';
	}
	return (m[n-1]);
}

int get_century_code(int year){
	if(year>=1700&&year<1800) return 4;
	else if(year>=1800&&year<1900) return 2;
	else if(year>=1900&&year<2000) return 0;
	else if(year>=2000&&year<2100) return 6;
	else if(year>=2100&&year<2200) return 4;
	else if(year>=2200&&year<2300) return 2;
	else return 0;
}

bool get_leap_year(int year){
	if(year%4==0){
		if(year%100==0){
			if(year%400==0){
				return true;
			}else return false;
		}else return true;
	}else{
		return false;
	}
}
std::map<int, string> m;
void set_day(){
	m[0] = "Sunday";
	m[1] = "Monday";
	m[2] = "Tuesday";
	m[3] = "Wednesday";
	m[4] = "Thursday";
	m[5] = "Friday";
	m[6] = "Saturday";
}

class Solution {
    
public:
    string dayOfTheWeek(int day, int month, int year) {
        // set day..
	set_day();

	// year code 
	int rem = year%100;
	int year_code = (rem + (rem/4))%7;

	//month code
	int month_code = get_month_code(month);

	//country code
	int century_code = get_century_code(year);

	//leap_year code
	int leap_year = get_leap_year(year);
    if(leap_year&&month<=2) leap_year = 1;
    else leap_year = 0;

	int final_day = year_code + month_code + century_code + day - leap_year ;
	final_day%=7;

	    //cout<<m[final_day]<<endl; 
        return m[final_day];
    }
};
