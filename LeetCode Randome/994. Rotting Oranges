class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        rows = len(grid)
        if rows == 0:
            return 0
        
        cols = len(grid[0])
        
        distance = {}
        queue = collections.deque()
        latest = 0
        
        for x in range(rows):
            for y in range(cols):
                if grid[x][y] ==2 :
                    queue.append((x,y,0));
                    distance[(x,y)] = 0
        
        while len(queue) >0:
            x,y,d = queue.popleft()
            latest = max(latest, d)
            for dx,dy in [(1,0),(0,1),(-1,0),(0,-1)]:
                nx,ny = dx+x,dy+y
                
                if 0<= nx <rows and 0<= ny< cols and grid[nx][ny] == 1:
                    grid[nx][ny] = 2
                    distance[(nx,ny)] = d+1
                    queue.append((nx,ny,d+1))
        for i in distance:
            print(i,distance[i])
        
        for x in range(rows):
            for y in range(cols):
                if grid[x][y] == 1:
                    return -1
        return latest
         
