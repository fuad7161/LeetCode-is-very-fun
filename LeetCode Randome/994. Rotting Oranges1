class Solution {
public:
    //vector<vector<int>>vis(100,vector<int>(100,0));
    int vis[100][100];
    //vector<vector<int>>level(100,vector<int>(100,100000));
    int level[100][100];
    int n , m;
    bool ck(int x,int y){
        return x>=0 and x<n and y>=0 and y<m;
    }
    
    int orangesRotting(vector<vector<int>>& grid) {
        for(int i=0;i<100;i++)for(int j=0;j<100;j++)level[i][j] = 10000;
        n = grid.size();
        m = grid[0].size();
        
        queue<pair<int,int>>q;
        int cnt = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({i,j});
                    level[i][j] = 0;
                }else if(grid[i][j] == 1){
                    cnt++;
                }
            }
        }        int mx = 0;
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            
            q.pop();
            if(vis[x][y] == 0){
                vis[x][y] = 1;
                vector<int>dx = {-1,1,0,0};
                vector<int>dy = {0,0,1,-1};
                for(int i=0;i<4;i++){
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                    if(ck(nx,ny)){
                        if(grid[nx][ny] == 1){
                            q.push({nx,ny});
                            level[nx][ny] = min(level[x][y]+1,level[nx][ny]);
                        }
                    }
                }   
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1 and vis[i][j] == 0) {
                    cout<<i<<" "<<j<<endl;
                    return -1;
                }
            }
        }
        

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout<<level[i][j]<<" ";
                if(grid[i][j] == 1)mx = max(level[i][j],mx);
            }cout<<endl;
        }
        return mx;
        
    }
};
